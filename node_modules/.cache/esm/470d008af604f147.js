let createServer,readFile,resolve,parse;_f60‍.w("http",[["createServer",["createServer"],function(v){createServer=v}]]);_f60‍.w("fs",[["readFile",["readFile"],function(v){readFile=v}]]);_f60‍.w("path",[["resolve",["resolve"],function(v){resolve=v}]]);_f60‍.w("queryString",[["parse",["parse"],function(v){parse=v}]]);





const server = createServer((request,response) => {

    

    switch (request.url){

        case '/': {
            response.writeHead(200, {
               'Content-Type': 'application/json', 
            }); // requisição padrão requisição resposta
            response.write(JSON.stringify({
                status: 'oi'
            }));
            response.end();
            break ;
        }

        case '/status': {
            response.writeHead(200, {
               'Content-Type': 'application/json', 
            }); // requisição padrão requisição resposta
            response.write(JSON.stringify({
                status: 'Okay'
            }));
            response.end();
            break ;
        }

        case '/sign-in': {
            const filePath = resolve(__dirname,'./pages/sign-in.html');
            readFile(filePath, (error,file) => {
                if(error){
                    response.writeHead(500,'Can\'t process HTML file.');
                    response.end();
                    return;
                }

                response.writeHead(200);
                response.write(file);
                response.end();
            });
            break;
        }

        case '/authenticate': {
            let data = '';
            request.on('data', (chunk) => {
                data += chunk;
            } );
            request.on('end', () => {
                _f60‍.g.console.log(parse(data));
                response.writeHead(200);
                response.end();
            } )

            break;
        }

        default: {
            response.writeHead(404, 'Service not found.');
            response.end();
        }
    } 

});


const PORT = process.env.PORT ? parseInt(process.env.PORT) : 8000;
const HOSTNAME =  process.env.HOSTNAME || '127.0.0.1';

server.listen(PORT, HOSTNAME, () => {
    console.log(`Server is listening at http://${HOSTNAME}:${PORT}.`);
});